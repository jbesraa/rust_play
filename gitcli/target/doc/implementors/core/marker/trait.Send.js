(function() {var implementors = {};
implementors["arc_swap"] = [{"text":"impl&lt;'l, T&gt; Send for Guard&lt;'l, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for ArcSwapAny&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DirectDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for DynGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; Send for Map&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ConstantDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Constant&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; Send for Cache&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; Send for MapCache&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Shard","synthetic":true,"types":[]},{"text":"impl Send for Global","synthetic":true,"types":[]},{"text":"impl Send for PrivateUnsharded","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for PrivateSharded&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G, T&gt; Send for MapGuard&lt;G, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;'a T: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl Send for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl Send for ParseMonthError","synthetic":true,"types":[]},{"text":"impl Send for SecondsFormat","synthetic":true,"types":[]},{"text":"impl Send for RoundingError","synthetic":true,"types":[]},{"text":"impl Send for Weekday","synthetic":true,"types":[]},{"text":"impl Send for Month","synthetic":true,"types":[]},{"text":"impl Send for FixedOffset","synthetic":true,"types":[]},{"text":"impl Send for Local","synthetic":true,"types":[]},{"text":"impl Send for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NaiveDate","synthetic":true,"types":[]},{"text":"impl Send for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl Send for IsoWeek","synthetic":true,"types":[]},{"text":"impl Send for NaiveTime","synthetic":true,"types":[]},{"text":"impl Send for Parsed","synthetic":true,"types":[]},{"text":"impl Send for InternalNumeric","synthetic":true,"types":[]},{"text":"impl Send for InternalFixed","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Pad","synthetic":true,"types":[]},{"text":"impl Send for Numeric","synthetic":true,"types":[]},{"text":"impl Send for Fixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Send for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Send for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["crossterm"] = [{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for MoveTo","synthetic":true,"types":[]},{"text":"impl Send for MoveToNextLine","synthetic":true,"types":[]},{"text":"impl Send for MoveToPreviousLine","synthetic":true,"types":[]},{"text":"impl Send for MoveToColumn","synthetic":true,"types":[]},{"text":"impl Send for MoveUp","synthetic":true,"types":[]},{"text":"impl Send for MoveRight","synthetic":true,"types":[]},{"text":"impl Send for MoveDown","synthetic":true,"types":[]},{"text":"impl Send for MoveLeft","synthetic":true,"types":[]},{"text":"impl Send for SavePosition","synthetic":true,"types":[]},{"text":"impl Send for RestorePosition","synthetic":true,"types":[]},{"text":"impl Send for Hide","synthetic":true,"types":[]},{"text":"impl Send for Show","synthetic":true,"types":[]},{"text":"impl Send for EnableBlinking","synthetic":true,"types":[]},{"text":"impl Send for DisableBlinking","synthetic":true,"types":[]},{"text":"impl Send for EnableMouseCapture","synthetic":true,"types":[]},{"text":"impl Send for DisableMouseCapture","synthetic":true,"types":[]},{"text":"impl Send for KeyModifiers","synthetic":true,"types":[]},{"text":"impl Send for KeyEvent","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for MouseEvent","synthetic":true,"types":[]},{"text":"impl Send for MouseButton","synthetic":true,"types":[]},{"text":"impl Send for KeyCode","synthetic":true,"types":[]},{"text":"impl Send for Attributes","synthetic":true,"types":[]},{"text":"impl Send for ContentStyle","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for StyledContent&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Colors","synthetic":true,"types":[]},{"text":"impl Send for SetForegroundColor","synthetic":true,"types":[]},{"text":"impl Send for SetBackgroundColor","synthetic":true,"types":[]},{"text":"impl Send for SetColors","synthetic":true,"types":[]},{"text":"impl Send for SetAttribute","synthetic":true,"types":[]},{"text":"impl Send for SetAttributes","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for PrintStyledContent&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ResetColor","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Print&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Attribute","synthetic":true,"types":[]},{"text":"impl Send for Color","synthetic":true,"types":[]},{"text":"impl Send for Colored","synthetic":true,"types":[]},{"text":"impl Send for EnterAlternateScreen","synthetic":true,"types":[]},{"text":"impl Send for LeaveAlternateScreen","synthetic":true,"types":[]},{"text":"impl Send for ScrollUp","synthetic":true,"types":[]},{"text":"impl Send for ScrollDown","synthetic":true,"types":[]},{"text":"impl Send for Clear","synthetic":true,"types":[]},{"text":"impl Send for SetSize","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SetTitle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClearType","synthetic":true,"types":[]}];
implementors["git2"] = [{"text":"impl&lt;'cb&gt; !Send for ApplyOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Blame&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'blame&gt; !Send for BlameHunk&lt;'blame&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'blame&gt; !Send for BlameIter&lt;'blame&gt;","synthetic":true,"types":[]},{"text":"impl Send for BlameOptions","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Blob&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for BlobWriter&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Branch&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Branches&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Buf","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !Send for CherrypickOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Commit&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'commit, 'repo&gt; !Send for Parents&lt;'commit, 'repo&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Config","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !Send for ConfigEntries&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !Send for ConfigEntry&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Cred","synthetic":true,"types":[]},{"text":"impl Send for CredentialHelper","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Describe&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl !Send for DescribeFormatOptions","synthetic":true,"types":[]},{"text":"impl !Send for DescribeOptions","synthetic":true,"types":[]},{"text":"impl&lt;'diff&gt; !Send for Deltas&lt;'diff&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for DiffDelta&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for DiffFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for DiffOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for DiffBinary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for DiffBinaryFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for DiffFindOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for DiffHunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for DiffLine&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for DiffStats","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl !Send for Index","synthetic":true,"types":[]},{"text":"impl Send for IndexConflict","synthetic":true,"types":[]},{"text":"impl&lt;'index&gt; !Send for IndexConflicts&lt;'index&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'index&gt; !Send for IndexEntries&lt;'index&gt;","synthetic":true,"types":[]},{"text":"impl Send for IndexEntry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Progress&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'odb&gt; !Send for Mempack&lt;'odb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for AnnotatedCommit&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl !Send for MergeOptions","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Note&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Notes&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Object&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Odb&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for OdbObject&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for OdbPackwriter&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for OdbReader&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for OdbWriter&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl Send for Oid","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for PackBuilder&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Pathspec","synthetic":true,"types":[]},{"text":"impl&lt;'list&gt; !Send for PathspecFailedEntries&lt;'list&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ps&gt; !Send for PathspecMatchList&lt;'ps&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'list&gt; !Send for PathspecDiffEntries&lt;'list&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'list&gt; !Send for PathspecEntries&lt;'list&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ProxyOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Rebase&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'rebase&gt; !Send for RebaseOperation&lt;'rebase&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !Send for RebaseOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Reference&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo, 'references&gt; !Send for ReferenceNames&lt;'repo, 'references&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for References&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Reflog","synthetic":true,"types":[]},{"text":"impl&lt;'reflog&gt; !Send for ReflogEntry&lt;'reflog&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'reflog&gt; !Send for ReflogIter&lt;'reflog&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'remote&gt; !Send for Refspec&lt;'remote&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !Send for FetchOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !Send for PushOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'remote&gt; !Send for Refspecs&lt;'remote&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Remote&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo, 'connection, 'cb&gt; !Send for RemoteConnection&lt;'repo, 'connection, 'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'remote&gt; !Send for RemoteHead&lt;'remote&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for RemoteCallbacks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for RepositoryInitOptions","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !Send for RevertOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Revspec&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Revwalk&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Signature&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !Send for StashApplyOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'statuses&gt; !Send for StatusEntry&lt;'statuses&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'statuses&gt; !Send for StatusIter&lt;'statuses&gt;","synthetic":true,"types":[]},{"text":"impl !Send for StatusOptions","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Statuses&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Submodule&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !Send for SubmoduleUpdateOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Tag&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl Send for IndexTime","synthetic":true,"types":[]},{"text":"impl Send for Time","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Tree&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'tree&gt; !Send for TreeEntry&lt;'tree&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'tree&gt; !Send for TreeIter&lt;'tree&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for TreeBuilder&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl Send for Sort","synthetic":true,"types":[]},{"text":"impl Send for CredentialType","synthetic":true,"types":[]},{"text":"impl Send for IndexEntryFlag","synthetic":true,"types":[]},{"text":"impl Send for IndexEntryExtendedFlag","synthetic":true,"types":[]},{"text":"impl Send for IndexAddOption","synthetic":true,"types":[]},{"text":"impl Send for RepositoryOpenFlags","synthetic":true,"types":[]},{"text":"impl Send for RevparseMode","synthetic":true,"types":[]},{"text":"impl Send for MergeAnalysis","synthetic":true,"types":[]},{"text":"impl Send for MergePreference","synthetic":true,"types":[]},{"text":"impl Send for Status","synthetic":true,"types":[]},{"text":"impl Send for RepositoryInitMode","synthetic":true,"types":[]},{"text":"impl Send for SubmoduleStatus","synthetic":true,"types":[]},{"text":"impl Send for PathspecFlags","synthetic":true,"types":[]},{"text":"impl Send for CheckoutNotificationType","synthetic":true,"types":[]},{"text":"impl Send for DiffStatsFormat","synthetic":true,"types":[]},{"text":"impl Send for StashApplyFlags","synthetic":true,"types":[]},{"text":"impl Send for StashFlags","synthetic":true,"types":[]},{"text":"impl Send for AttrCheckFlags","synthetic":true,"types":[]},{"text":"impl Send for DiffFlags","synthetic":true,"types":[]},{"text":"impl Send for ApplyLocation","synthetic":true,"types":[]},{"text":"impl Send for DiffBinaryKind","synthetic":true,"types":[]},{"text":"impl Send for PackBuilderStage","synthetic":true,"types":[]},{"text":"impl Send for RebaseOperationType","synthetic":true,"types":[]},{"text":"impl Send for StatusShow","synthetic":true,"types":[]},{"text":"impl Send for TreeWalkMode","synthetic":true,"types":[]},{"text":"impl Send for TreeWalkResult","synthetic":true,"types":[]},{"text":"impl Send for ErrorCode","synthetic":true,"types":[]},{"text":"impl Send for ErrorClass","synthetic":true,"types":[]},{"text":"impl Send for RepositoryState","synthetic":true,"types":[]},{"text":"impl Send for Direction","synthetic":true,"types":[]},{"text":"impl Send for ResetType","synthetic":true,"types":[]},{"text":"impl Send for ObjectType","synthetic":true,"types":[]},{"text":"impl Send for ReferenceType","synthetic":true,"types":[]},{"text":"impl Send for BranchType","synthetic":true,"types":[]},{"text":"impl Send for ConfigLevel","synthetic":true,"types":[]},{"text":"impl Send for FileFavor","synthetic":true,"types":[]},{"text":"impl Send for Delta","synthetic":true,"types":[]},{"text":"impl Send for FileMode","synthetic":true,"types":[]},{"text":"impl Send for SubmoduleIgnore","synthetic":true,"types":[]},{"text":"impl Send for DiffFormat","synthetic":true,"types":[]},{"text":"impl Send for AutotagOption","synthetic":true,"types":[]},{"text":"impl Send for FetchPrune","synthetic":true,"types":[]},{"text":"impl Send for StashApplyProgress","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !Send for RepoBuilder&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !Send for CheckoutBuilder&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl Send for CloneLocal","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Cert&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for CertHostkey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for CertX509&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for OidArray","synthetic":true,"types":[]},{"text":"impl !Send for StringArray","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for IterBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Transport","synthetic":true,"types":[]},{"text":"impl Send for Service","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; Send for Diff&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'buffers&gt; Send for Patch&lt;'buffers&gt;","synthetic":false,"types":[]},{"text":"impl Send for Repository","synthetic":false,"types":[]}];
implementors["idna"] = [{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Errors","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl !Send for group","synthetic":true,"types":[]},{"text":"impl Send for utimbuf","synthetic":true,"types":[]},{"text":"impl Send for timeval","synthetic":true,"types":[]},{"text":"impl Send for timespec","synthetic":true,"types":[]},{"text":"impl Send for rlimit","synthetic":true,"types":[]},{"text":"impl Send for rusage","synthetic":true,"types":[]},{"text":"impl Send for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl !Send for hostent","synthetic":true,"types":[]},{"text":"impl !Send for iovec","synthetic":true,"types":[]},{"text":"impl Send for pollfd","synthetic":true,"types":[]},{"text":"impl Send for winsize","synthetic":true,"types":[]},{"text":"impl Send for linger","synthetic":true,"types":[]},{"text":"impl !Send for sigval","synthetic":true,"types":[]},{"text":"impl Send for itimerval","synthetic":true,"types":[]},{"text":"impl Send for tms","synthetic":true,"types":[]},{"text":"impl !Send for servent","synthetic":true,"types":[]},{"text":"impl !Send for protoent","synthetic":true,"types":[]},{"text":"impl Send for sockaddr","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl !Send for passwd","synthetic":true,"types":[]},{"text":"impl !Send for ifaddrs","synthetic":true,"types":[]},{"text":"impl Send for fd_set","synthetic":true,"types":[]},{"text":"impl !Send for tm","synthetic":true,"types":[]},{"text":"impl !Send for msghdr","synthetic":true,"types":[]},{"text":"impl Send for cmsghdr","synthetic":true,"types":[]},{"text":"impl Send for fsid_t","synthetic":true,"types":[]},{"text":"impl !Send for if_nameindex","synthetic":true,"types":[]},{"text":"impl !Send for regex_t","synthetic":true,"types":[]},{"text":"impl Send for regmatch_t","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Send for utsname","synthetic":true,"types":[]},{"text":"impl Send for ip_mreq","synthetic":true,"types":[]},{"text":"impl !Send for aiocb","synthetic":true,"types":[]},{"text":"impl !Send for glob_t","synthetic":true,"types":[]},{"text":"impl !Send for addrinfo","synthetic":true,"types":[]},{"text":"impl Send for mach_timebase_info","synthetic":true,"types":[]},{"text":"impl Send for stat","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl !Send for siginfo_t","synthetic":true,"types":[]},{"text":"impl Send for sigaction","synthetic":true,"types":[]},{"text":"impl !Send for stack_t","synthetic":true,"types":[]},{"text":"impl Send for fstore_t","synthetic":true,"types":[]},{"text":"impl Send for radvisory","synthetic":true,"types":[]},{"text":"impl Send for statvfs","synthetic":true,"types":[]},{"text":"impl !Send for Dl_info","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Send for kevent64_s","synthetic":true,"types":[]},{"text":"impl Send for dqblk","synthetic":true,"types":[]},{"text":"impl Send for if_msghdr","synthetic":true,"types":[]},{"text":"impl Send for termios","synthetic":true,"types":[]},{"text":"impl Send for flock","synthetic":true,"types":[]},{"text":"impl !Send for sf_hdtr","synthetic":true,"types":[]},{"text":"impl !Send for lconv","synthetic":true,"types":[]},{"text":"impl Send for proc_taskinfo","synthetic":true,"types":[]},{"text":"impl Send for proc_bsdinfo","synthetic":true,"types":[]},{"text":"impl Send for proc_taskallinfo","synthetic":true,"types":[]},{"text":"impl Send for xsw_usage","synthetic":true,"types":[]},{"text":"impl Send for xucred","synthetic":true,"types":[]},{"text":"impl Send for mach_header","synthetic":true,"types":[]},{"text":"impl Send for mach_header_64","synthetic":true,"types":[]},{"text":"impl Send for segment_command","synthetic":true,"types":[]},{"text":"impl Send for segment_command_64","synthetic":true,"types":[]},{"text":"impl Send for load_command","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_dl","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_inarp","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_ctl","synthetic":true,"types":[]},{"text":"impl Send for in_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for ipc_perm","synthetic":true,"types":[]},{"text":"impl Send for sembuf","synthetic":true,"types":[]},{"text":"impl Send for arphdr","synthetic":true,"types":[]},{"text":"impl Send for in_addr","synthetic":true,"types":[]},{"text":"impl !Send for sa_endpoints_t","synthetic":true,"types":[]},{"text":"impl Send for timex","synthetic":true,"types":[]},{"text":"impl Send for ntptimeval","synthetic":true,"types":[]},{"text":"impl !Send for kevent","synthetic":true,"types":[]},{"text":"impl Send for semid_ds","synthetic":true,"types":[]},{"text":"impl !Send for shmid_ds","synthetic":true,"types":[]},{"text":"impl Send for proc_threadinfo","synthetic":true,"types":[]},{"text":"impl Send for statfs","synthetic":true,"types":[]},{"text":"impl Send for dirent","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Send for utmpx","synthetic":true,"types":[]},{"text":"impl !Send for sigevent","synthetic":true,"types":[]},{"text":"impl Send for timeval32","synthetic":true,"types":[]},{"text":"impl Send for if_data","synthetic":true,"types":[]},{"text":"impl Send for bpf_hdr","synthetic":true,"types":[]},{"text":"impl !Send for ucontext_t","synthetic":true,"types":[]},{"text":"impl Send for __darwin_mcontext64","synthetic":true,"types":[]},{"text":"impl Send for __darwin_x86_exception_state64","synthetic":true,"types":[]},{"text":"impl Send for __darwin_x86_thread_state64","synthetic":true,"types":[]},{"text":"impl Send for __darwin_x86_float_state64","synthetic":true,"types":[]},{"text":"impl Send for __darwin_mmst_reg","synthetic":true,"types":[]},{"text":"impl Send for __darwin_xmm_reg","synthetic":true,"types":[]},{"text":"impl Send for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Send for max_align_t","synthetic":true,"types":[]},{"text":"impl Send for in6_addr","synthetic":true,"types":[]},{"text":"impl !Send for semun","synthetic":true,"types":[]},{"text":"impl Send for DIR","synthetic":true,"types":[]},{"text":"impl Send for FILE","synthetic":true,"types":[]},{"text":"impl Send for fpos_t","synthetic":true,"types":[]},{"text":"impl Send for timezone","synthetic":true,"types":[]}];
implementors["libgit2_sys"] = [{"text":"impl !Send for git_revspec","synthetic":true,"types":[]},{"text":"impl !Send for git_error","synthetic":true,"types":[]},{"text":"impl Send for git_oid","synthetic":true,"types":[]},{"text":"impl !Send for git_strarray","synthetic":true,"types":[]},{"text":"impl !Send for git_oidarray","synthetic":true,"types":[]},{"text":"impl !Send for git_signature","synthetic":true,"types":[]},{"text":"impl Send for git_time","synthetic":true,"types":[]},{"text":"impl !Send for git_clone_options","synthetic":true,"types":[]},{"text":"impl !Send for git_checkout_options","synthetic":true,"types":[]},{"text":"impl Send for git_checkout_perfdata","synthetic":true,"types":[]},{"text":"impl Send for git_indexer_progress","synthetic":true,"types":[]},{"text":"impl !Send for git_remote_callbacks","synthetic":true,"types":[]},{"text":"impl !Send for git_fetch_options","synthetic":true,"types":[]},{"text":"impl !Send for git_push_update","synthetic":true,"types":[]},{"text":"impl Send for git_cert","synthetic":true,"types":[]},{"text":"impl Send for git_cert_hostkey","synthetic":true,"types":[]},{"text":"impl !Send for git_cert_x509","synthetic":true,"types":[]},{"text":"impl !Send for git_diff_file","synthetic":true,"types":[]},{"text":"impl !Send for git_status_options","synthetic":true,"types":[]},{"text":"impl !Send for git_diff_delta","synthetic":true,"types":[]},{"text":"impl !Send for git_status_entry","synthetic":true,"types":[]},{"text":"impl !Send for git_buf","synthetic":true,"types":[]},{"text":"impl Send for git_blame_options","synthetic":true,"types":[]},{"text":"impl !Send for git_blame_hunk","synthetic":true,"types":[]},{"text":"impl !Send for git_index_entry","synthetic":true,"types":[]},{"text":"impl Send for git_index_time","synthetic":true,"types":[]},{"text":"impl !Send for git_config_entry","synthetic":true,"types":[]},{"text":"impl !Send for git_submodule_update_options","synthetic":true,"types":[]},{"text":"impl Send for git_writestream","synthetic":true,"types":[]},{"text":"impl Send for git_cred","synthetic":true,"types":[]},{"text":"impl !Send for git_push_options","synthetic":true,"types":[]},{"text":"impl !Send for git_repository_init_options","synthetic":true,"types":[]},{"text":"impl !Send for git_remote_head","synthetic":true,"types":[]},{"text":"impl Send for git_diff_hunk","synthetic":true,"types":[]},{"text":"impl !Send for git_diff_line","synthetic":true,"types":[]},{"text":"impl !Send for git_diff_options","synthetic":true,"types":[]},{"text":"impl !Send for git_diff_find_options","synthetic":true,"types":[]},{"text":"impl !Send for git_diff_similarity_metric","synthetic":true,"types":[]},{"text":"impl !Send for git_diff_format_email_options","synthetic":true,"types":[]},{"text":"impl !Send for git_diff_binary","synthetic":true,"types":[]},{"text":"impl !Send for git_diff_binary_file","synthetic":true,"types":[]},{"text":"impl !Send for git_merge_options","synthetic":true,"types":[]},{"text":"impl Send for git_transport","synthetic":true,"types":[]},{"text":"impl !Send for git_odb_backend","synthetic":true,"types":[]},{"text":"impl !Send for git_odb_writepack","synthetic":true,"types":[]},{"text":"impl Send for git_refdb_backend","synthetic":true,"types":[]},{"text":"impl !Send for git_proxy_options","synthetic":true,"types":[]},{"text":"impl !Send for git_smart_subtransport_stream","synthetic":true,"types":[]},{"text":"impl Send for git_smart_subtransport","synthetic":true,"types":[]},{"text":"impl !Send for git_smart_subtransport_definition","synthetic":true,"types":[]},{"text":"impl !Send for git_describe_options","synthetic":true,"types":[]},{"text":"impl !Send for git_describe_format_options","synthetic":true,"types":[]},{"text":"impl !Send for git_stash_apply_options","synthetic":true,"types":[]},{"text":"impl !Send for git_rebase_options","synthetic":true,"types":[]},{"text":"impl !Send for git_rebase_operation","synthetic":true,"types":[]},{"text":"impl !Send for git_cherrypick_options","synthetic":true,"types":[]},{"text":"impl !Send for git_apply_options","synthetic":true,"types":[]},{"text":"impl Send for git_blob","synthetic":true,"types":[]},{"text":"impl Send for git_branch_iterator","synthetic":true,"types":[]},{"text":"impl Send for git_blame","synthetic":true,"types":[]},{"text":"impl Send for git_commit","synthetic":true,"types":[]},{"text":"impl Send for git_config","synthetic":true,"types":[]},{"text":"impl Send for git_config_iterator","synthetic":true,"types":[]},{"text":"impl Send for git_index","synthetic":true,"types":[]},{"text":"impl Send for git_index_conflict_iterator","synthetic":true,"types":[]},{"text":"impl Send for git_object","synthetic":true,"types":[]},{"text":"impl Send for git_reference","synthetic":true,"types":[]},{"text":"impl Send for git_reference_iterator","synthetic":true,"types":[]},{"text":"impl Send for git_annotated_commit","synthetic":true,"types":[]},{"text":"impl Send for git_refdb","synthetic":true,"types":[]},{"text":"impl Send for git_refspec","synthetic":true,"types":[]},{"text":"impl Send for git_remote","synthetic":true,"types":[]},{"text":"impl Send for git_repository","synthetic":true,"types":[]},{"text":"impl Send for git_revwalk","synthetic":true,"types":[]},{"text":"impl Send for git_submodule","synthetic":true,"types":[]},{"text":"impl Send for git_tag","synthetic":true,"types":[]},{"text":"impl Send for git_tree","synthetic":true,"types":[]},{"text":"impl Send for git_tree_entry","synthetic":true,"types":[]},{"text":"impl Send for git_treebuilder","synthetic":true,"types":[]},{"text":"impl Send for git_push","synthetic":true,"types":[]},{"text":"impl Send for git_note","synthetic":true,"types":[]},{"text":"impl Send for git_note_iterator","synthetic":true,"types":[]},{"text":"impl Send for git_status_list","synthetic":true,"types":[]},{"text":"impl Send for git_pathspec","synthetic":true,"types":[]},{"text":"impl Send for git_pathspec_match_list","synthetic":true,"types":[]},{"text":"impl Send for git_diff","synthetic":true,"types":[]},{"text":"impl Send for git_diff_stats","synthetic":true,"types":[]},{"text":"impl Send for git_patch","synthetic":true,"types":[]},{"text":"impl Send for git_rebase","synthetic":true,"types":[]},{"text":"impl Send for git_reflog","synthetic":true,"types":[]},{"text":"impl Send for git_reflog_entry","synthetic":true,"types":[]},{"text":"impl Send for git_describe_result","synthetic":true,"types":[]},{"text":"impl Send for git_packbuilder","synthetic":true,"types":[]},{"text":"impl Send for git_odb","synthetic":true,"types":[]},{"text":"impl Send for git_odb_stream","synthetic":true,"types":[]},{"text":"impl Send for git_odb_object","synthetic":true,"types":[]},{"text":"impl Send for git_worktree","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_SESSION","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_USERAUTH_KBDINT_PROMPT","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_USERAUTH_KBDINT_RESPONSE","synthetic":true,"types":[]}];
implementors["libssh2_sys"] = [{"text":"impl Send for libssh2_struct_stat","synthetic":true,"types":[]},{"text":"impl !Send for libssh2_agent_publickey","synthetic":true,"types":[]},{"text":"impl !Send for libssh2_knownhost","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_SFTP_ATTRIBUTES","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_SFTP_STATVFS","synthetic":true,"types":[]},{"text":"impl !Send for LIBSSH2_USERAUTH_KBDINT_PROMPT","synthetic":true,"types":[]},{"text":"impl !Send for LIBSSH2_USERAUTH_KBDINT_RESPONSE","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_SESSION","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_AGENT","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_CHANNEL","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_LISTENER","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_KNOWNHOSTS","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_SFTP","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_SFTP_HANDLE","synthetic":true,"types":[]}];
implementors["libz_sys"] = [{"text":"impl !Send for gz_header","synthetic":true,"types":[]},{"text":"impl !Send for z_stream","synthetic":true,"types":[]},{"text":"impl Send for gzFile_s","synthetic":true,"types":[]},{"text":"impl Send for internal_state","synthetic":true,"types":[]}];
implementors["lock_api"] = [{"text":"impl Send for GuardSend","synthetic":true,"types":[]},{"text":"impl !Send for GuardNoSend","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for MutexGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawMutex&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T&gt; !Send for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T&gt; !Send for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for RwLockReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for RwLockWriteGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for RwLockUpgradableReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Send, T:&nbsp;?Sized + Send&gt; Send for Mutex&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, T:&nbsp;?Sized + 'a&gt; Send for MappedMutexGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::GuardMarker: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Send, G:&nbsp;GetThreadId + Send, T:&nbsp;?Sized + Send&gt; Send for ReentrantMutex&lt;R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawRwLock + Send, T:&nbsp;?Sized + Send&gt; Send for RwLock&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Send for MappedRwLockReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::GuardMarker: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Send for MappedRwLockWriteGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::GuardMarker: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; !Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Send for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for LevelFilter","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl Send for Interest","synthetic":true,"types":[]},{"text":"impl Send for Poll","synthetic":true,"types":[]},{"text":"impl Send for Registry","synthetic":true,"types":[]},{"text":"impl Send for Token","synthetic":true,"types":[]},{"text":"impl Send for Waker","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SourceFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Event","synthetic":true,"types":[]},{"text":"impl Send for Events","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Send for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Send for ParseFloatError","synthetic":true,"types":[]},{"text":"impl Send for FloatErrorKind","synthetic":true,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl Send for AES_KEY","synthetic":true,"types":[]},{"text":"impl !Send for ASN1_ENCODING","synthetic":true,"types":[]},{"text":"impl !Send for ERR_STRING_DATA","synthetic":true,"types":[]},{"text":"impl !Send for X509V3_CTX","synthetic":true,"types":[]},{"text":"impl Send for SHA_CTX","synthetic":true,"types":[]},{"text":"impl Send for SHA256_CTX","synthetic":true,"types":[]},{"text":"impl Send for SHA512_CTX","synthetic":true,"types":[]},{"text":"impl !Send for SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl !Send for X509_VAL","synthetic":true,"types":[]},{"text":"impl !Send for GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl Send for stack_st_ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl Send for BIO_METHOD","synthetic":true,"types":[]},{"text":"impl Send for CMS_ContentInfo","synthetic":true,"types":[]},{"text":"impl Send for stack_st_void","synthetic":true,"types":[]},{"text":"impl Send for point_conversion_form_t","synthetic":true,"types":[]},{"text":"impl Send for EC_METHOD","synthetic":true,"types":[]},{"text":"impl Send for EC_GROUP","synthetic":true,"types":[]},{"text":"impl Send for EC_POINT","synthetic":true,"types":[]},{"text":"impl Send for ECDSA_SIG","synthetic":true,"types":[]},{"text":"impl Send for OCSP_CERTID","synthetic":true,"types":[]},{"text":"impl Send for OCSP_ONEREQ","synthetic":true,"types":[]},{"text":"impl Send for OCSP_REQUEST","synthetic":true,"types":[]},{"text":"impl Send for OCSP_BASICRESP","synthetic":true,"types":[]},{"text":"impl Send for ASN1_INTEGER","synthetic":true,"types":[]},{"text":"impl Send for ASN1_GENERALIZEDTIME","synthetic":true,"types":[]},{"text":"impl Send for ASN1_STRING","synthetic":true,"types":[]},{"text":"impl Send for ASN1_BIT_STRING","synthetic":true,"types":[]},{"text":"impl Send for ASN1_TIME","synthetic":true,"types":[]},{"text":"impl Send for ASN1_TYPE","synthetic":true,"types":[]},{"text":"impl Send for ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl Send for ASN1_OCTET_STRING","synthetic":true,"types":[]},{"text":"impl Send for bio_st","synthetic":true,"types":[]},{"text":"impl Send for BIO","synthetic":true,"types":[]},{"text":"impl Send for BIGNUM","synthetic":true,"types":[]},{"text":"impl Send for BN_BLINDING","synthetic":true,"types":[]},{"text":"impl Send for BN_MONT_CTX","synthetic":true,"types":[]},{"text":"impl Send for BN_CTX","synthetic":true,"types":[]},{"text":"impl Send for BN_GENCB","synthetic":true,"types":[]},{"text":"impl Send for EVP_CIPHER","synthetic":true,"types":[]},{"text":"impl Send for EVP_CIPHER_CTX","synthetic":true,"types":[]},{"text":"impl Send for EVP_MD","synthetic":true,"types":[]},{"text":"impl Send for EVP_MD_CTX","synthetic":true,"types":[]},{"text":"impl Send for EVP_PKEY","synthetic":true,"types":[]},{"text":"impl Send for PKCS8_PRIV_KEY_INFO","synthetic":true,"types":[]},{"text":"impl Send for EVP_PKEY_ASN1_METHOD","synthetic":true,"types":[]},{"text":"impl Send for EVP_PKEY_CTX","synthetic":true,"types":[]},{"text":"impl Send for HMAC_CTX","synthetic":true,"types":[]},{"text":"impl Send for DH","synthetic":true,"types":[]},{"text":"impl Send for DH_METHOD","synthetic":true,"types":[]},{"text":"impl Send for DSA","synthetic":true,"types":[]},{"text":"impl Send for DSA_METHOD","synthetic":true,"types":[]},{"text":"impl Send for RSA","synthetic":true,"types":[]},{"text":"impl Send for RSA_METHOD","synthetic":true,"types":[]},{"text":"impl Send for EC_KEY","synthetic":true,"types":[]},{"text":"impl Send for X509","synthetic":true,"types":[]},{"text":"impl Send for X509_ALGOR","synthetic":true,"types":[]},{"text":"impl Send for X509_CRL","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509_CRL","synthetic":true,"types":[]},{"text":"impl Send for X509_NAME","synthetic":true,"types":[]},{"text":"impl Send for X509_STORE","synthetic":true,"types":[]},{"text":"impl Send for X509_STORE_CTX","synthetic":true,"types":[]},{"text":"impl Send for X509_VERIFY_PARAM","synthetic":true,"types":[]},{"text":"impl Send for CONF","synthetic":true,"types":[]},{"text":"impl Send for OPENSSL_INIT_SETTINGS","synthetic":true,"types":[]},{"text":"impl Send for ENGINE","synthetic":true,"types":[]},{"text":"impl Send for SSL","synthetic":true,"types":[]},{"text":"impl Send for SSL_CTX","synthetic":true,"types":[]},{"text":"impl Send for COMP_METHOD","synthetic":true,"types":[]},{"text":"impl Send for CRYPTO_EX_DATA","synthetic":true,"types":[]},{"text":"impl Send for OCSP_RESPONSE","synthetic":true,"types":[]},{"text":"impl Send for PKCS12","synthetic":true,"types":[]},{"text":"impl Send for PKCS7_SIGNED","synthetic":true,"types":[]},{"text":"impl Send for PKCS7_ENVELOPE","synthetic":true,"types":[]},{"text":"impl Send for PKCS7_SIGN_ENVELOPE","synthetic":true,"types":[]},{"text":"impl Send for PKCS7_DIGEST","synthetic":true,"types":[]},{"text":"impl Send for PKCS7_ENCRYPT","synthetic":true,"types":[]},{"text":"impl Send for PKCS7","synthetic":true,"types":[]},{"text":"impl Send for stack_st_OPENSSL_STRING","synthetic":true,"types":[]},{"text":"impl Send for SSL_METHOD","synthetic":true,"types":[]},{"text":"impl Send for SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl Send for SSL_SESSION","synthetic":true,"types":[]},{"text":"impl Send for stack_st_SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl Send for stack_st_SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl Send for OPENSSL_STACK","synthetic":true,"types":[]},{"text":"impl Send for X509_NAME_ENTRY","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509_NAME","synthetic":true,"types":[]},{"text":"impl Send for X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509_ATTRIBUTE","synthetic":true,"types":[]},{"text":"impl Send for X509_REQ_INFO","synthetic":true,"types":[]},{"text":"impl Send for X509_REQ","synthetic":true,"types":[]},{"text":"impl Send for X509_CINF","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509","synthetic":true,"types":[]},{"text":"impl Send for X509_OBJECT","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509_OBJECT","synthetic":true,"types":[]},{"text":"impl Send for X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl Send for CONF_METHOD","synthetic":true,"types":[]},{"text":"impl Send for stack_st_GENERAL_NAME","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Send for Condvar","synthetic":true,"types":[]},{"text":"impl Send for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl Send for Once","synthetic":true,"types":[]},{"text":"impl Send for RawFairMutex","synthetic":true,"types":[]},{"text":"impl Send for RawMutex","synthetic":true,"types":[]},{"text":"impl Send for RawRwLock","synthetic":true,"types":[]},{"text":"impl Send for RawThreadId","synthetic":true,"types":[]},{"text":"impl Send for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Send for ParkToken","synthetic":true,"types":[]},{"text":"impl Send for UnparkResult","synthetic":true,"types":[]},{"text":"impl Send for UnparkToken","synthetic":true,"types":[]},{"text":"impl Send for SpinWait","synthetic":true,"types":[]},{"text":"impl Send for FilterOp","synthetic":true,"types":[]},{"text":"impl Send for ParkResult","synthetic":true,"types":[]},{"text":"impl Send for RequeueOp","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Send for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !Send for TokenStream","synthetic":true,"types":[]},{"text":"impl !Send for LexError","synthetic":true,"types":[]},{"text":"impl !Send for Span","synthetic":true,"types":[]},{"text":"impl !Send for Group","synthetic":true,"types":[]},{"text":"impl !Send for Punct","synthetic":true,"types":[]},{"text":"impl !Send for Ident","synthetic":true,"types":[]},{"text":"impl !Send for Literal","synthetic":true,"types":[]},{"text":"impl !Send for TokenTree","synthetic":true,"types":[]},{"text":"impl Send for Delimiter","synthetic":true,"types":[]},{"text":"impl Send for Spacing","synthetic":true,"types":[]},{"text":"impl !Send for IntoIter","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl&lt;T, F, S&gt; Send for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Always","synthetic":true,"types":[]}];
implementors["signal_hook"] = [{"text":"impl Send for Signals","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Pending&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Forever&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl Send for SigId","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A&gt; Send for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send + Array&gt; Send for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Send for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl !Send for Attribute","synthetic":true,"types":[]},{"text":"impl !Send for MetaList","synthetic":true,"types":[]},{"text":"impl !Send for MetaNameValue","synthetic":true,"types":[]},{"text":"impl !Send for Field","synthetic":true,"types":[]},{"text":"impl !Send for FieldsNamed","synthetic":true,"types":[]},{"text":"impl !Send for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl !Send for Variant","synthetic":true,"types":[]},{"text":"impl !Send for VisCrate","synthetic":true,"types":[]},{"text":"impl !Send for VisPublic","synthetic":true,"types":[]},{"text":"impl !Send for VisRestricted","synthetic":true,"types":[]},{"text":"impl !Send for ExprArray","synthetic":true,"types":[]},{"text":"impl !Send for ExprAssign","synthetic":true,"types":[]},{"text":"impl !Send for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl !Send for ExprAsync","synthetic":true,"types":[]},{"text":"impl !Send for ExprAwait","synthetic":true,"types":[]},{"text":"impl !Send for ExprBinary","synthetic":true,"types":[]},{"text":"impl !Send for ExprBlock","synthetic":true,"types":[]},{"text":"impl !Send for ExprBox","synthetic":true,"types":[]},{"text":"impl !Send for ExprBreak","synthetic":true,"types":[]},{"text":"impl !Send for ExprCall","synthetic":true,"types":[]},{"text":"impl !Send for ExprCast","synthetic":true,"types":[]},{"text":"impl !Send for ExprClosure","synthetic":true,"types":[]},{"text":"impl !Send for ExprContinue","synthetic":true,"types":[]},{"text":"impl !Send for ExprField","synthetic":true,"types":[]},{"text":"impl !Send for ExprForLoop","synthetic":true,"types":[]},{"text":"impl !Send for ExprGroup","synthetic":true,"types":[]},{"text":"impl !Send for ExprIf","synthetic":true,"types":[]},{"text":"impl !Send for ExprIndex","synthetic":true,"types":[]},{"text":"impl !Send for ExprLet","synthetic":true,"types":[]},{"text":"impl !Send for ExprLit","synthetic":true,"types":[]},{"text":"impl !Send for ExprLoop","synthetic":true,"types":[]},{"text":"impl !Send for ExprMacro","synthetic":true,"types":[]},{"text":"impl !Send for ExprMatch","synthetic":true,"types":[]},{"text":"impl !Send for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl !Send for ExprParen","synthetic":true,"types":[]},{"text":"impl !Send for ExprPath","synthetic":true,"types":[]},{"text":"impl !Send for ExprRange","synthetic":true,"types":[]},{"text":"impl !Send for ExprReference","synthetic":true,"types":[]},{"text":"impl !Send for ExprRepeat","synthetic":true,"types":[]},{"text":"impl !Send for ExprReturn","synthetic":true,"types":[]},{"text":"impl !Send for ExprStruct","synthetic":true,"types":[]},{"text":"impl !Send for ExprTry","synthetic":true,"types":[]},{"text":"impl !Send for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl !Send for ExprTuple","synthetic":true,"types":[]},{"text":"impl !Send for ExprType","synthetic":true,"types":[]},{"text":"impl !Send for ExprUnary","synthetic":true,"types":[]},{"text":"impl !Send for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl !Send for ExprWhile","synthetic":true,"types":[]},{"text":"impl !Send for ExprYield","synthetic":true,"types":[]},{"text":"impl !Send for Index","synthetic":true,"types":[]},{"text":"impl !Send for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl !Send for ConstParam","synthetic":true,"types":[]},{"text":"impl !Send for Generics","synthetic":true,"types":[]},{"text":"impl !Send for LifetimeDef","synthetic":true,"types":[]},{"text":"impl !Send for PredicateEq","synthetic":true,"types":[]},{"text":"impl !Send for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl !Send for PredicateType","synthetic":true,"types":[]},{"text":"impl !Send for TraitBound","synthetic":true,"types":[]},{"text":"impl !Send for TypeParam","synthetic":true,"types":[]},{"text":"impl !Send for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Lifetime","synthetic":true,"types":[]},{"text":"impl !Send for LitBool","synthetic":true,"types":[]},{"text":"impl !Send for LitByte","synthetic":true,"types":[]},{"text":"impl !Send for LitByteStr","synthetic":true,"types":[]},{"text":"impl !Send for LitChar","synthetic":true,"types":[]},{"text":"impl !Send for LitFloat","synthetic":true,"types":[]},{"text":"impl !Send for LitInt","synthetic":true,"types":[]},{"text":"impl !Send for LitStr","synthetic":true,"types":[]},{"text":"impl !Send for Macro","synthetic":true,"types":[]},{"text":"impl !Send for DataEnum","synthetic":true,"types":[]},{"text":"impl !Send for DataStruct","synthetic":true,"types":[]},{"text":"impl !Send for DataUnion","synthetic":true,"types":[]},{"text":"impl !Send for DeriveInput","synthetic":true,"types":[]},{"text":"impl !Send for Abi","synthetic":true,"types":[]},{"text":"impl !Send for BareFnArg","synthetic":true,"types":[]},{"text":"impl !Send for TypeArray","synthetic":true,"types":[]},{"text":"impl !Send for TypeBareFn","synthetic":true,"types":[]},{"text":"impl !Send for TypeGroup","synthetic":true,"types":[]},{"text":"impl !Send for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl !Send for TypeInfer","synthetic":true,"types":[]},{"text":"impl !Send for TypeMacro","synthetic":true,"types":[]},{"text":"impl !Send for TypeNever","synthetic":true,"types":[]},{"text":"impl !Send for TypeParen","synthetic":true,"types":[]},{"text":"impl !Send for TypePath","synthetic":true,"types":[]},{"text":"impl !Send for TypePtr","synthetic":true,"types":[]},{"text":"impl !Send for TypeReference","synthetic":true,"types":[]},{"text":"impl !Send for TypeSlice","synthetic":true,"types":[]},{"text":"impl !Send for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl !Send for TypeTuple","synthetic":true,"types":[]},{"text":"impl !Send for Variadic","synthetic":true,"types":[]},{"text":"impl !Send for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Send for Binding","synthetic":true,"types":[]},{"text":"impl !Send for Constraint","synthetic":true,"types":[]},{"text":"impl !Send for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Send for Path","synthetic":true,"types":[]},{"text":"impl !Send for PathSegment","synthetic":true,"types":[]},{"text":"impl !Send for QSelf","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl !Send for AttrStyle","synthetic":true,"types":[]},{"text":"impl !Send for Meta","synthetic":true,"types":[]},{"text":"impl !Send for NestedMeta","synthetic":true,"types":[]},{"text":"impl !Send for Fields","synthetic":true,"types":[]},{"text":"impl !Send for Visibility","synthetic":true,"types":[]},{"text":"impl !Send for Expr","synthetic":true,"types":[]},{"text":"impl !Send for Member","synthetic":true,"types":[]},{"text":"impl !Send for GenericParam","synthetic":true,"types":[]},{"text":"impl !Send for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl !Send for TypeParamBound","synthetic":true,"types":[]},{"text":"impl !Send for WherePredicate","synthetic":true,"types":[]},{"text":"impl !Send for Lit","synthetic":true,"types":[]},{"text":"impl Send for StrStyle","synthetic":true,"types":[]},{"text":"impl !Send for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl !Send for Data","synthetic":true,"types":[]},{"text":"impl !Send for BinOp","synthetic":true,"types":[]},{"text":"impl !Send for UnOp","synthetic":true,"types":[]},{"text":"impl !Send for ReturnType","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for GenericArgument","synthetic":true,"types":[]},{"text":"impl !Send for PathArguments","synthetic":true,"types":[]},{"text":"impl !Send for Underscore","synthetic":true,"types":[]},{"text":"impl !Send for Abstract","synthetic":true,"types":[]},{"text":"impl !Send for As","synthetic":true,"types":[]},{"text":"impl !Send for Async","synthetic":true,"types":[]},{"text":"impl !Send for Auto","synthetic":true,"types":[]},{"text":"impl !Send for Await","synthetic":true,"types":[]},{"text":"impl !Send for Become","synthetic":true,"types":[]},{"text":"impl !Send for Box","synthetic":true,"types":[]},{"text":"impl !Send for Break","synthetic":true,"types":[]},{"text":"impl !Send for Const","synthetic":true,"types":[]},{"text":"impl !Send for Continue","synthetic":true,"types":[]},{"text":"impl !Send for Crate","synthetic":true,"types":[]},{"text":"impl !Send for Default","synthetic":true,"types":[]},{"text":"impl !Send for Do","synthetic":true,"types":[]},{"text":"impl !Send for Dyn","synthetic":true,"types":[]},{"text":"impl !Send for Else","synthetic":true,"types":[]},{"text":"impl !Send for Enum","synthetic":true,"types":[]},{"text":"impl !Send for Extern","synthetic":true,"types":[]},{"text":"impl !Send for Final","synthetic":true,"types":[]},{"text":"impl !Send for Fn","synthetic":true,"types":[]},{"text":"impl !Send for For","synthetic":true,"types":[]},{"text":"impl !Send for If","synthetic":true,"types":[]},{"text":"impl !Send for Impl","synthetic":true,"types":[]},{"text":"impl !Send for In","synthetic":true,"types":[]},{"text":"impl !Send for Let","synthetic":true,"types":[]},{"text":"impl !Send for Loop","synthetic":true,"types":[]},{"text":"impl !Send for Macro","synthetic":true,"types":[]},{"text":"impl !Send for Match","synthetic":true,"types":[]},{"text":"impl !Send for Mod","synthetic":true,"types":[]},{"text":"impl !Send for Move","synthetic":true,"types":[]},{"text":"impl !Send for Mut","synthetic":true,"types":[]},{"text":"impl !Send for Override","synthetic":true,"types":[]},{"text":"impl !Send for Priv","synthetic":true,"types":[]},{"text":"impl !Send for Pub","synthetic":true,"types":[]},{"text":"impl !Send for Ref","synthetic":true,"types":[]},{"text":"impl !Send for Return","synthetic":true,"types":[]},{"text":"impl !Send for SelfType","synthetic":true,"types":[]},{"text":"impl !Send for SelfValue","synthetic":true,"types":[]},{"text":"impl !Send for Static","synthetic":true,"types":[]},{"text":"impl !Send for Struct","synthetic":true,"types":[]},{"text":"impl !Send for Super","synthetic":true,"types":[]},{"text":"impl !Send for Trait","synthetic":true,"types":[]},{"text":"impl !Send for Try","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for Typeof","synthetic":true,"types":[]},{"text":"impl !Send for Union","synthetic":true,"types":[]},{"text":"impl !Send for Unsafe","synthetic":true,"types":[]},{"text":"impl !Send for Unsized","synthetic":true,"types":[]},{"text":"impl !Send for Use","synthetic":true,"types":[]},{"text":"impl !Send for Virtual","synthetic":true,"types":[]},{"text":"impl !Send for Where","synthetic":true,"types":[]},{"text":"impl !Send for While","synthetic":true,"types":[]},{"text":"impl !Send for Yield","synthetic":true,"types":[]},{"text":"impl !Send for Add","synthetic":true,"types":[]},{"text":"impl !Send for AddEq","synthetic":true,"types":[]},{"text":"impl !Send for And","synthetic":true,"types":[]},{"text":"impl !Send for AndAnd","synthetic":true,"types":[]},{"text":"impl !Send for AndEq","synthetic":true,"types":[]},{"text":"impl !Send for At","synthetic":true,"types":[]},{"text":"impl !Send for Bang","synthetic":true,"types":[]},{"text":"impl !Send for Caret","synthetic":true,"types":[]},{"text":"impl !Send for CaretEq","synthetic":true,"types":[]},{"text":"impl !Send for Colon","synthetic":true,"types":[]},{"text":"impl !Send for Colon2","synthetic":true,"types":[]},{"text":"impl !Send for Comma","synthetic":true,"types":[]},{"text":"impl !Send for Div","synthetic":true,"types":[]},{"text":"impl !Send for DivEq","synthetic":true,"types":[]},{"text":"impl !Send for Dollar","synthetic":true,"types":[]},{"text":"impl !Send for Dot","synthetic":true,"types":[]},{"text":"impl !Send for Dot2","synthetic":true,"types":[]},{"text":"impl !Send for Dot3","synthetic":true,"types":[]},{"text":"impl !Send for DotDotEq","synthetic":true,"types":[]},{"text":"impl !Send for Eq","synthetic":true,"types":[]},{"text":"impl !Send for EqEq","synthetic":true,"types":[]},{"text":"impl !Send for Ge","synthetic":true,"types":[]},{"text":"impl !Send for Gt","synthetic":true,"types":[]},{"text":"impl !Send for Le","synthetic":true,"types":[]},{"text":"impl !Send for Lt","synthetic":true,"types":[]},{"text":"impl !Send for MulEq","synthetic":true,"types":[]},{"text":"impl !Send for Ne","synthetic":true,"types":[]},{"text":"impl !Send for Or","synthetic":true,"types":[]},{"text":"impl !Send for OrEq","synthetic":true,"types":[]},{"text":"impl !Send for OrOr","synthetic":true,"types":[]},{"text":"impl !Send for Pound","synthetic":true,"types":[]},{"text":"impl !Send for Question","synthetic":true,"types":[]},{"text":"impl !Send for RArrow","synthetic":true,"types":[]},{"text":"impl !Send for LArrow","synthetic":true,"types":[]},{"text":"impl !Send for Rem","synthetic":true,"types":[]},{"text":"impl !Send for RemEq","synthetic":true,"types":[]},{"text":"impl !Send for FatArrow","synthetic":true,"types":[]},{"text":"impl !Send for Semi","synthetic":true,"types":[]},{"text":"impl !Send for Shl","synthetic":true,"types":[]},{"text":"impl !Send for ShlEq","synthetic":true,"types":[]},{"text":"impl !Send for Shr","synthetic":true,"types":[]},{"text":"impl !Send for ShrEq","synthetic":true,"types":[]},{"text":"impl !Send for Star","synthetic":true,"types":[]},{"text":"impl !Send for Sub","synthetic":true,"types":[]},{"text":"impl !Send for SubEq","synthetic":true,"types":[]},{"text":"impl !Send for Tilde","synthetic":true,"types":[]},{"text":"impl !Send for Brace","synthetic":true,"types":[]},{"text":"impl !Send for Bracket","synthetic":true,"types":[]},{"text":"impl !Send for Paren","synthetic":true,"types":[]},{"text":"impl !Send for Group","synthetic":true,"types":[]},{"text":"impl !Send for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Send for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Send for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !Send for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Nothing","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl Send for Duration","synthetic":true,"types":[]},{"text":"impl Send for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl Send for Timespec","synthetic":true,"types":[]},{"text":"impl Send for PreciseTime","synthetic":true,"types":[]},{"text":"impl Send for SteadyTime","synthetic":true,"types":[]},{"text":"impl Send for Tm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TmFmt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A&gt; Send for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A&gt; Send for ArrayVecDrain&lt;'p, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for ArrayVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A&gt; Send for TinyVecDrain&lt;'p, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for TinyVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Send for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Send for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Send for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl Send for BidiClass","synthetic":true,"types":[]},{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; Send for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IsNormalized","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl Send for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Origin","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl Send for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl Send for Position","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Serializer&lt;'a, T&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()