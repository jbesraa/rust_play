(function() {var implementors = {};
implementors["chrono"] = [{"text":"impl&lt;'a&gt; Iterator for StrftimeItems&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["git2"] = [{"text":"impl&lt;'a&gt; Iterator for Iter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Iterator for IterBytes&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'blame&gt; Iterator for BlameIter&lt;'blame&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Iterator for Branches&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo, 'commit&gt; Iterator for Parents&lt;'commit, 'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'cfg, 'b&gt; Iterator for &amp;'b ConfigEntries&lt;'cfg&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'diff&gt; Iterator for Deltas&lt;'diff&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'index&gt; Iterator for IndexEntries&lt;'index&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'index&gt; Iterator for IndexConflicts&lt;'index&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Iterator for Notes&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'list&gt; Iterator for PathspecEntries&lt;'list&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'list&gt; Iterator for PathspecDiffEntries&lt;'list&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'list&gt; Iterator for PathspecFailedEntries&lt;'list&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'rebase&gt; Iterator for Rebase&lt;'rebase&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Iterator for References&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo, 'references&gt; Iterator for ReferenceNames&lt;'repo, 'references&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'reflog&gt; Iterator for ReflogIter&lt;'reflog&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Iterator for Refspecs&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Iterator for Revwalk&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Iterator for StatusIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'tree&gt; Iterator for TreeIter&lt;'tree&gt;","synthetic":false,"types":[]}];
implementors["mio"] = [{"text":"impl&lt;'a&gt; Iterator for Iter&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;T&gt; Iterator for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Integer + Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl&lt;'a&gt; Iterator for PercentEncode&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Iterator for PercentDecode&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Iterator for IntoIter","synthetic":false,"types":[]}];
implementors["signal_hook"] = [{"text":"impl&lt;'a&gt; Iterator for Pending&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Iterator for Forever&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, T:&nbsp;'a + Array&gt; Iterator for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Iterator for IntoIter&lt;A&gt;","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl&lt;'a, T, P&gt; Iterator for Pairs&lt;'a, T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, P&gt; Iterator for PairsMut&lt;'a, T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Iterator for IntoPairs&lt;T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Iterator for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Iterator for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Iterator for IterMut&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;'p, A:&nbsp;Array&gt; Iterator for ArrayVecDrain&lt;'p, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Iterator for ArrayVecIterator&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'p, A:&nbsp;Array&gt; Iterator for TinyVecDrain&lt;'p, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Iterator for TinyVecIterator&lt;A&gt;","synthetic":false,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I:&nbsp;Iterator&lt;Item = char&gt;&gt; Iterator for Decompositions&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Iterator&lt;Item = char&gt;&gt; Iterator for Recompositions&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Iterator&lt;Item = char&gt;&gt; Iterator for StreamSafe&lt;I&gt;","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl&lt;'a&gt; Iterator for Parse&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Iterator for ParseIntoOwned&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Iterator for ByteSerialize&lt;'a&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()