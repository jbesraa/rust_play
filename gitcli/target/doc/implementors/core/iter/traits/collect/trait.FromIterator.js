(function() {var implementors = {};
implementors["crossterm"] = [{"text":"impl FromIterator&lt;KeyModifiers&gt; for KeyModifiers","synthetic":false,"types":[]}];
implementors["git2"] = [{"text":"impl FromIterator&lt;Sort&gt; for Sort","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;CredentialType&gt; for CredentialType","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;IndexEntryFlag&gt; for IndexEntryFlag","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;IndexEntryExtendedFlag&gt; for IndexEntryExtendedFlag","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;IndexAddOption&gt; for IndexAddOption","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;RepositoryOpenFlags&gt; for RepositoryOpenFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;RevparseMode&gt; for RevparseMode","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;MergeAnalysis&gt; for MergeAnalysis","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;MergePreference&gt; for MergePreference","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Status&gt; for Status","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;RepositoryInitMode&gt; for RepositoryInitMode","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;SubmoduleStatus&gt; for SubmoduleStatus","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;PathspecFlags&gt; for PathspecFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;CheckoutNotificationType&gt; for CheckoutNotificationType","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;DiffStatsFormat&gt; for DiffStatsFormat","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;StashApplyFlags&gt; for StashApplyFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;StashFlags&gt; for StashFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;AttrCheckFlags&gt; for AttrCheckFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;DiffFlags&gt; for DiffFlags","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl FromIterator&lt;TokenTree&gt; for TokenStream","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;TokenStream&gt; for TokenStream","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; FromIterator&lt;&lt;A as Array&gt;::Item&gt; for SmallVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl&lt;T, P&gt; FromIterator&lt;T&gt; for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; FromIterator&lt;Pair&lt;T, P&gt;&gt; for Punctuated&lt;T, P&gt;","synthetic":false,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A:&nbsp;Array + Default&gt; FromIterator&lt;&lt;A as Array&gt;::Item&gt; for ArrayVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array + Default&gt; FromIterator&lt;&lt;A as Array&gt;::Item&gt; for TinyVec&lt;A&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()