(function() {var implementors = {};
implementors["git2"] = [{"text":"impl&lt;'a&gt; DoubleEndedIterator for Iter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; DoubleEndedIterator for IterBytes&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'blame&gt; DoubleEndedIterator for BlameIter&lt;'blame&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo, 'commit&gt; DoubleEndedIterator for Parents&lt;'commit, 'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'diff&gt; DoubleEndedIterator for Deltas&lt;'diff&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'list&gt; DoubleEndedIterator for PathspecEntries&lt;'list&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'list&gt; DoubleEndedIterator for PathspecDiffEntries&lt;'list&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'list&gt; DoubleEndedIterator for PathspecFailedEntries&lt;'list&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'reflog&gt; DoubleEndedIterator for ReflogIter&lt;'reflog&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; DoubleEndedIterator for Refspecs&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; DoubleEndedIterator for StatusIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'tree&gt; DoubleEndedIterator for TreeIter&lt;'tree&gt;","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, T:&nbsp;'a + Array&gt; DoubleEndedIterator for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; DoubleEndedIterator for IntoIter&lt;A&gt;","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl&lt;'a, T, P&gt; DoubleEndedIterator for Pairs&lt;'a, T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, P&gt; DoubleEndedIterator for PairsMut&lt;'a, T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; DoubleEndedIterator for IntoPairs&lt;T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; DoubleEndedIterator for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; DoubleEndedIterator for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; DoubleEndedIterator for IterMut&lt;'a, T&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()