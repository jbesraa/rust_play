(function() {var implementors = {};
implementors["arc_swap"] = [{"text":"impl&lt;'l, T&gt; UnwindSafe for Guard&lt;'l, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for ArcSwapAny&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as RefCnt&gt;::Base: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DirectDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for DynGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G, T&gt; UnwindSafe for MapGuard&lt;G, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; UnwindSafe for Map&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ConstantDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Constant&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; UnwindSafe for Cache&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; UnwindSafe for MapCache&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Global","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrivateUnsharded","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for PrivateSharded&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;Tz&gt; UnwindSafe for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; UnwindSafe for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseMonthError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SecondsFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoundingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Weekday","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Month","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FixedOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaiveDate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsoWeek","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaiveTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parsed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InternalNumeric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InternalFixed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pad","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["crossterm"] = [{"text":"impl !UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MoveTo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MoveToNextLine","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MoveToPreviousLine","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MoveToColumn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MoveUp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MoveRight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MoveDown","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MoveLeft","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SavePosition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RestorePosition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Hide","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Show","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnableBlinking","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DisableBlinking","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnableMouseCapture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DisableMouseCapture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyModifiers","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MouseEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MouseButton","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Attributes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentStyle","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for StyledContent&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colors","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetForegroundColor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetBackgroundColor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetColors","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetAttribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetAttributes","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for PrintStyledContent&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResetColor","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Print&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colored","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnterAlternateScreen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LeaveAlternateScreen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScrollUp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScrollDown","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Clear","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetSize","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SetTitle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClearType","synthetic":true,"types":[]}];
implementors["git2"] = [{"text":"impl&lt;'cb&gt; !UnwindSafe for ApplyOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Blame&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'blame&gt; UnwindSafe for BlameHunk&lt;'blame&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'blame&gt; UnwindSafe for BlameIter&lt;'blame&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlameOptions","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Blob&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for BlobWriter&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Branch&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Branches&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Buf","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !UnwindSafe for CherrypickOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Commit&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'commit, 'repo&gt; UnwindSafe for Parents&lt;'commit, 'repo&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; UnwindSafe for ConfigEntries&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; UnwindSafe for ConfigEntry&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cred","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CredentialHelper","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Describe&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescribeFormatOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescribeOptions","synthetic":true,"types":[]},{"text":"impl&lt;'diff&gt; UnwindSafe for Deltas&lt;'diff&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Diff&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DiffDelta&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DiffFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DiffBinary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DiffBinaryFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffFindOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DiffHunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DiffLine&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffStats","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexConflict","synthetic":true,"types":[]},{"text":"impl&lt;'index&gt; UnwindSafe for IndexConflicts&lt;'index&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'index&gt; UnwindSafe for IndexEntries&lt;'index&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexEntry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Progress&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'odb&gt; UnwindSafe for Mempack&lt;'odb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for AnnotatedCommit&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MergeOptions","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Note&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Notes&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Object&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Odb&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for OdbObject&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !UnwindSafe for OdbPackwriter&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for OdbReader&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for OdbWriter&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Oid","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !UnwindSafe for PackBuilder&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'buffers&gt; UnwindSafe for Patch&lt;'buffers&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pathspec","synthetic":true,"types":[]},{"text":"impl&lt;'list&gt; UnwindSafe for PathspecFailedEntries&lt;'list&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ps&gt; UnwindSafe for PathspecMatchList&lt;'ps&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'list&gt; UnwindSafe for PathspecDiffEntries&lt;'list&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'list&gt; UnwindSafe for PathspecEntries&lt;'list&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ProxyOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Rebase&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'rebase&gt; UnwindSafe for RebaseOperation&lt;'rebase&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !UnwindSafe for RebaseOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Reference&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo, 'references&gt; !UnwindSafe for ReferenceNames&lt;'repo, 'references&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for References&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Reflog","synthetic":true,"types":[]},{"text":"impl&lt;'reflog&gt; UnwindSafe for ReflogEntry&lt;'reflog&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'reflog&gt; UnwindSafe for ReflogIter&lt;'reflog&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'remote&gt; UnwindSafe for Refspec&lt;'remote&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !UnwindSafe for FetchOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !UnwindSafe for PushOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'remote&gt; UnwindSafe for Refspecs&lt;'remote&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Remote&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo, 'connection, 'cb&gt; !UnwindSafe for RemoteConnection&lt;'repo, 'connection, 'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'remote&gt; UnwindSafe for RemoteHead&lt;'remote&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for RemoteCallbacks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repository","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepositoryInitOptions","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !UnwindSafe for RevertOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Revspec&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Revwalk&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Signature&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !UnwindSafe for StashApplyOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'statuses&gt; UnwindSafe for StatusEntry&lt;'statuses&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'statuses&gt; UnwindSafe for StatusIter&lt;'statuses&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatusOptions","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Statuses&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Submodule&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !UnwindSafe for SubmoduleUpdateOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Tag&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for Tree&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'tree&gt; UnwindSafe for TreeEntry&lt;'tree&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'tree&gt; UnwindSafe for TreeIter&lt;'tree&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; UnwindSafe for TreeBuilder&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sort","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CredentialType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexEntryFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexEntryExtendedFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexAddOption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepositoryOpenFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RevparseMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MergeAnalysis","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MergePreference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepositoryInitMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubmoduleStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathspecFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckoutNotificationType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffStatsFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StashApplyFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StashFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttrCheckFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ApplyLocation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffBinaryKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PackBuilderStage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RebaseOperationType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatusShow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TreeWalkMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TreeWalkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorClass","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepositoryState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Direction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResetType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReferenceType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BranchType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfigLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileFavor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Delta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubmoduleIgnore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiffFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AutotagOption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FetchPrune","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StashApplyProgress","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !UnwindSafe for RepoBuilder&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !UnwindSafe for CheckoutBuilder&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CloneLocal","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Cert&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CertHostkey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CertX509&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OidArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StringArray","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for IterBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Transport","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Service","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Errors","synthetic":true,"types":[]}];
implementors["libgit2_sys"] = [{"text":"impl UnwindSafe for git_revspec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_oid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_strarray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_oidarray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_time","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_clone_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_checkout_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_checkout_perfdata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_indexer_progress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_remote_callbacks","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_fetch_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_push_update","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_cert","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_cert_hostkey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_cert_x509","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_file","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_status_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_delta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_status_entry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_buf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_blame_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_blame_hunk","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_index_entry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_index_time","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_config_entry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_submodule_update_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_writestream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_cred","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_push_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_repository_init_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_remote_head","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_hunk","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_line","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_find_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_similarity_metric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_format_email_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_binary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_binary_file","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_merge_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_transport","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_odb_backend","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_odb_writepack","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_refdb_backend","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_proxy_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_smart_subtransport_stream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_smart_subtransport","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_smart_subtransport_definition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_describe_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_describe_format_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_stash_apply_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_rebase_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_rebase_operation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_cherrypick_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_apply_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_blob","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_branch_iterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_blame","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_commit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_config_iterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_index","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_index_conflict_iterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_object","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_reference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_reference_iterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_annotated_commit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_refdb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_refspec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_remote","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_repository","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_revwalk","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_submodule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_tag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_tree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_tree_entry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_treebuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_push","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_note","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_note_iterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_status_list","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_pathspec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_pathspec_match_list","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_diff_stats","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_patch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_rebase","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_reflog","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_reflog_entry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_describe_result","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_packbuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_odb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_odb_stream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_odb_object","synthetic":true,"types":[]},{"text":"impl UnwindSafe for git_worktree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_SESSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_USERAUTH_KBDINT_PROMPT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_USERAUTH_KBDINT_RESPONSE","synthetic":true,"types":[]}];
implementors["libssh2_sys"] = [{"text":"impl UnwindSafe for libssh2_struct_stat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for libssh2_agent_publickey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for libssh2_knownhost","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_SFTP_ATTRIBUTES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_SFTP_STATVFS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_USERAUTH_KBDINT_PROMPT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_USERAUTH_KBDINT_RESPONSE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_SESSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_AGENT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_CHANNEL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_LISTENER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_KNOWNHOSTS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_SFTP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LIBSSH2_SFTP_HANDLE","synthetic":true,"types":[]}];
implementors["libz_sys"] = [{"text":"impl UnwindSafe for gz_header","synthetic":true,"types":[]},{"text":"impl UnwindSafe for z_stream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for gzFile_s","synthetic":true,"types":[]},{"text":"impl UnwindSafe for internal_state","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl UnwindSafe for Interest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Poll","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Registry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Token","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Waker","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SourceFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Events","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl UnwindSafe for AES_KEY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_ENCODING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ERR_STRING_DATA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509V3_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHA_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHA256_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHA512_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_VAL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BIO_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CMS_ContentInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_void","synthetic":true,"types":[]},{"text":"impl UnwindSafe for point_conversion_form_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_GROUP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_POINT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ECDSA_SIG","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_CERTID","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_ONEREQ","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_REQUEST","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_BASICRESP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_INTEGER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_GENERALIZEDTIME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_BIT_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_TIME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_OCTET_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for bio_st","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BIO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BIGNUM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_BLINDING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_MONT_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_GENCB","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_CIPHER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_CIPHER_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_MD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_MD_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_PKEY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS8_PRIV_KEY_INFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_PKEY_ASN1_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_PKEY_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HMAC_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DH","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DH_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DSA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DSA_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RSA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RSA_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_KEY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_ALGOR","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_CRL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_CRL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_NAME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_STORE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_STORE_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_VERIFY_PARAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CONF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OPENSSL_INIT_SETTINGS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ENGINE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COMP_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CRYPTO_EX_DATA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_RESPONSE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_SIGNED","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_ENVELOPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_SIGN_ENVELOPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_DIGEST","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_ENCRYPT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_OPENSSL_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_SESSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OPENSSL_STACK","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_NAME_ENTRY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_NAME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_ATTRIBUTE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_REQ_INFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_REQ","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_CINF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CONF_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_GENERAL_NAME","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl UnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawFairMutex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawMutex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawRwLock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawThreadId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl UnwindSafe for ParkToken","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnparkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnparkToken","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpinWait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequeueOp","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl UnwindSafe for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl UnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for IntoIter","synthetic":true,"types":[]}];
implementors["signal_hook"] = [{"text":"impl UnwindSafe for Signals","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Pending&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Forever&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl UnwindSafe for SigId","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl UnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl UnwindSafe for As","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for For","synthetic":true,"types":[]},{"text":"impl UnwindSafe for If","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for In","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl UnwindSafe for While","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for And","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for At","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; UnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; !UnwindSafe for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !UnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Nothing","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl UnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Timespec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreciseTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SteadyTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TmFmt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl UnwindSafe for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; UnwindSafe for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; UnwindSafe for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BidiClass","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; UnwindSafe for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsNormalized","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl UnwindSafe for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Origin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Serializer&lt;'a, T&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()